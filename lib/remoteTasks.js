// Generated by CoffeeScript 2.3.1
(function() {
  var BashCmd, CWD, _settings, abs, async, cli, cmdString, fs, getAppLocation, getBackupLocation, nodemiral, path;

  path = require('path');

  nodemiral = require('nodemiral');

  cli = require('cli');

  fs = require('fs');

  async = require('async');

  _settings = require("./settings");

  CWD = process.cwd();

  abs = require("abs");

  getAppLocation = function(pm2mConf) {
    return path.join(pm2mConf.server.deploymentDir, pm2mConf.appName);
  };

  getBackupLocation = function(pm2mConf) {
    return path.join(getAppLocation(pm2mConf), _settings.backupDir);
  };

  BashCmd = (function() {
    var appendCmd;

    class BashCmd {
      constructor(pm2mConf, rawCmd) {
        if (pm2mConf && rawCmd) {
          this.pm2mConf = pm2mConf;
          this.rawCmd = rawCmd;
        } else {
          throw new Error("You must pass a pm2mConf and a Command string...");
        }
      }

      getString() {
        var loadProfile, result;
        ({loadProfile} = this.pm2mConf.server);
        result = "";
        if (loadProfile) {
          result = appendCmd(result, `[[ -r ${loadProfile} ]] && . ${loadProfile}`);
        }
        result = appendCmd(result, this.rawCmd);
        return result;
      }

    };

    appendCmd = function(cmd1, cmd2) {
      if (cmd1) {
        return `${cmd1} && ${cmd2}`;
      } else {
        return `${cmd2}`;
      }
    };

    return BashCmd;

  }).call(this);

  cmdString = function(pm2mConf, cmd) {
    return new BashCmd(pm2mConf, cmd).getString();
  };

  // Remote tasks
  module.exports = {
    getRemoteSession: function(pm2mConf) {
      var session;
      session = nodemiral.session(`${pm2mConf.server.host}`, {
        username: pm2mConf.server.username,
        password: pm2mConf.server.password ? pm2mConf.server.password : void 0,
        pem: pm2mConf.server.pem ? fs.readFileSync(abs(pm2mConf.server.pem)) : void 0
      }, {
        ssh: pm2mConf.server.port ? {
          port: pm2mConf.server.port
        } : void 0
      });
      return session;
    },
    checkDeps: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, "(command -v node || echo 'missing node' 1>&2) && (command -v npm || echo 'missing npm' 1>&2) && (command -v pm2 || echo 'missing pm2' 1>&2)");
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr && logs.stderr.length > 0 && /.*missing.*/.test(logs.stderr)) {
            console.log("");
            console.log(logs.stderr);
            return done({
              message: "Please make sure you have node, npm and pm2 installed on your remote machine!"
            });
          } else {
            return done();
          }
        }
      });
    },
    prepareHost: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `mkdir -p ${path.join(getAppLocation(pm2mConf), _settings.backupDir)}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr && logs.stderr.length > 0) {
            done({
              message: `${logs.stderr}`
            });
          }
          return done();
        }
      });
    },
    shipTarBall: function(session, pm2mConf, done) {
      var destination, tarLocation;
      tarLocation = path.join(CWD, _settings.bundleTarName);
      destination = path.join(getAppLocation(pm2mConf), _settings.bundleTarName);
      console.log(tarLocation);
      console.log(destination);
      return session.copy(tarLocation, destination, {
        progressBar: true
      }, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          return done();
        }
      });
    },
    shipSettings: function(session, pm2mConf, done) {
      var destination, fileLocation;
      fileLocation = path.join(CWD, _settings.pm2EnvConfigName);
      destination = path.join(getAppLocation(pm2mConf), _settings.pm2EnvConfigName);
      console.log(fileLocation);
      console.log(destination);
      return session.copy(fileLocation, destination, {
        progressBar: true
      }, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          return done();
        }
      });
    },
    extractTarBall: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && rm -rf ${_settings.bundleName} && tar -xf ${_settings.bundleTarName}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          return done();
        }
      });
    },
    installBundleDeps: function(session, pm2mConf, done) {
      var cmd, serverLocation;
      serverLocation = path.join(getAppLocation(pm2mConf), _settings.bundleName, "/programs/server");
      cmd = cmdString(pm2mConf, `cd ${serverLocation} && node --version && npm i .`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          return done();
        }
      });
    },
    runRemoteScript: function(session, pm2mConf, done) {
      var cmd, serverLocation;
      if (pm2mConf.postbuildRemoteScript && pm2mConf.postbuildRemoteScript.trim() !== "") {
        serverLocation = path.join(getAppLocation(pm2mConf), _settings.bundleName, "/programs/server");
        cmd = cmdString(pm2mConf, `cd ${serverLocation} && ` + pm2mConf.postbuildRemoteScript);
        return session.execute(cmd, {}, function(err, code, logs) {
          if (err) {
            return done(err);
          } else {
            return done();
          }
        });
      } else {
        return done();
      }
    },
    startApp: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 start ${_settings.pm2EnvConfigName}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr) {
            done({
              message: logs.stderr
            });
          }
          return done();
        }
      });
    },
    stopApp: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 stop ${_settings.pm2EnvConfigName}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr) {
            done({
              message: logs.stderr
            });
          }
          return done();
        }
      });
    },
    status: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `pm2 show ${pm2mConf.appName}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr) {
            done(null, logs.stderr);
          }
          if (logs.stdout) {
            return done(null, logs.stdout);
          }
        }
      });
    },
    backupLastTar: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && mv ${_settings.bundleTarName} backup/ 2>/dev/null`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done();
        } else {
          return done();
        }
      });
    },
    killApp: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `pm2 delete ${pm2mConf.appName}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          return done();
        }
      });
    },
    reloadApp: function(session, pm2mConf, reconfig, done) {
      if (reconfig) {
        return this.hardReloadApp(session, pm2mConf, done);
      } else {
        return this.softReloadApp(session, pm2mConf, done);
      }
    },
    softReloadApp: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 startOrReload ${_settings.pm2EnvConfigName}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr) {
            console.log(logs.stderr);
          }
          return done();
        }
      });
    },
    hardReloadApp: function(session, pm2mConf, done) {
      var cmd1;
      cmd1 = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 delete ${pm2mConf.appName}`);
      return session.execute(cmd1, {}, function(err, code, logs) {
        var cmd2;
        if (err) {
          return done(err);
        } else {
          if (logs.sterr) {
            console.log(logs.stderr);
          }
          cmd2 = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 start ${_settings.pm2EnvConfigName}`);
          return session.execute(cmd2, {}, function(err, code, logs) {
            if (err) {
              return done(err);
            } else {
              if (logs.stderr) {
                console.log(logs.stderr);
              }
              return done();
            }
          });
        }
      });
    },
    deleteAppFolder: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `rm -rf ${getAppLocation(pm2mConf)}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr) {
            console.log(logs.stder);
          }
          return done();
        }
      });
    },
    scaleApp: function(session, pm2mConf, sParam, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `pm2 scale ${pm2mConf.appName} ${sParam}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr) {
            done({
              message: logs.stderr
            });
          }
          if (logs.stdout) {
            console.log(logs.stdout);
          }
          return done();
        }
      });
    },
    getAppLogs: function(session, pm2mConf, done) {
      var cmd;
      cmd = cmdString(pm2mConf, `pm2 logs ${pm2mConf.appName}`);
      return session.execute(cmd, {
        onStdout: console.log
      }, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr) {
            return done({
              message: logs.stderr
            });
          }
        }
      });
    },
    revertToBackup: function(session, pm2mConf, done) {
      var appLocation, backupLocation, cmd;
      appLocation = getAppLocation(pm2mConf);
      backupLocation = getBackupLocation(pm2mConf);
      cmd = cmdString(pm2mConf, `mv ${path.join(backupLocation, _settings.bundleTarName)} ${path.join(appLocation, _settings.bundleTarName)}`);
      console.log(`executing ${cmd}`);
      return session.execute(cmd, {}, function(err, code, logs) {
        if (err) {
          return done(err);
        } else {
          if (logs.stderr) {
            console.log("*** stderr while reverting to backup ***");
            done({
              message: logs.stderr
            });
          }
          if (logs.stdout) {
            console.log(logs.stdout);
          }
          return done();
        }
      });
    }
  };

}).call(this);
