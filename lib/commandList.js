// Generated by CoffeeScript 1.12.6
(function() {
  var _settings, async, cli, commonTasks, localTasks, remoteTasks;

  cli = require('cli');

  async = require('async');

  localTasks = require('./localTasks');

  commonTasks = require('./commonTasks');

  remoteTasks = require('./remoteTasks');

  _settings = require('./settings');

  module.exports = {
    init: function() {
      return localTasks.initPM2MeteorSettings(function(err) {
        if (err) {
          return cli.fatal("" + err.message);
        } else {
          return cli.info(_settings.pm2MeteorConfigName + " created!", true);
        }
      });
    },
    deploy: function(reconfig) {
      var pm2mConf, session;
      cli.spinner("Building your app and deploying to host machine");
      pm2mConf = commonTasks.readPM2MeteorConfig();
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return remoteTasks.checkDeps(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.prepareHost(session, pm2mConf, cb);
        }, function(cb) {
          return localTasks.generatePM2EnvironmentSettings(pm2mConf, cb);
        }, function(cb) {
          return localTasks.bundleApplication(pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.backupLastTar(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.shipTarBall(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.extractTarBall(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.installBundleDeps(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.reloadApp(session, pm2mConf, reconfig, cb);
        }
      ], function(err) {
        cli.spinner("", true);
        if (err) {
          localTasks.makeClean(function(err) {
            if (err) {
              return cli.error(err);
            }
          });
          return cli.fatal("" + err.message);
        } else {
          localTasks.makeClean(function(err) {
            if (err) {
              return cli.error(err);
            }
          });
          return cli.ok("Deployed your app on the host machine!");
        }
      });
    },
    reconfig: function() {
      var pm2mConf, session;
      cli.spinner("Deploying new env");
      pm2mConf = commonTasks.readPM2MeteorConfig();
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return localTasks.generatePM2EnvironmentSettings(pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.shipSettings(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.reloadApp(session, pm2mConf, true, cb);
        }
      ], function(err) {
        cli.spinner("", true);
        if (err) {
          localTasks.makeClean(function(err) {
            return null;
          });
          return cli.fatal("" + err.message);
        } else {
          localTasks.makeClean(function(err) {
            return null;
          });
          return cli.ok("Deployed new env settings");
        }
      });
    },
    start: function() {
      var pm2mConf, session;
      cli.spinner("Starting app on host machine");
      pm2mConf = commonTasks.readPM2MeteorConfig();
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return remoteTasks.startApp(session, pm2mConf, cb);
        }
      ], function(err) {
        cli.spinner("", true);
        if (err) {
          return cli.fatal("" + err.message);
        } else {
          return cli.ok("Started your app!");
        }
      });
    },
    stop: function() {
      var pm2mConf, session;
      cli.spinner("Stopping app on host machine");
      pm2mConf = commonTasks.readPM2MeteorConfig();
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return remoteTasks.stopApp(session, pm2mConf, cb);
        }
      ], function(err) {
        cli.spinner("", true);
        if (err) {
          return cli.fatal("" + err.message);
        } else {
          return cli.ok("Stopped your app!");
        }
      });
    },
    status: function() {
      var pm2mConf, session;
      cli.spinner("Checking status");
      pm2mConf = commonTasks.readPM2MeteorConfig();
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return remoteTasks.status(session, pm2mConf, cb);
        }
      ], function(err, result) {
        cli.spinner("", true);
        if (err) {
          return cli.fatal("" + err.message);
        } else {
          return cli.info(result);
        }
      });
    },
    generateBundle: function() {
      var pm2mConf;
      cli.spinner("Generating bundle with pm2-env file");
      pm2mConf = commonTasks.readPM2MeteorConfig();
      return async.series([
        function(cb) {
          return localTasks.generatePM2EnvironmentSettings(pm2mConf, cb);
        }, function(cb) {
          return localTasks.bundleApplication(pm2mConf, cb);
        }, function(cb) {
          return localTasks.makeCleanAndLeaveBundle(cb);
        }
      ], function(err) {
        cli.spinner("", true);
        if (err) {
          return cli.fatal("" + err.message);
        } else {
          return cli.ok("Generated " + _settings.bundleTarName + " with pm2-env file");
        }
      });
    },
    undeploy: function() {
      var pm2mConf, session;
      cli.spinner("Undeploying your App");
      pm2mConf = commonTasks.readPM2MeteorConfig();
      if (!(pm2mConf.allowUndeploy && pm2mConf.allowUndeploy === true)) {
        cli.fatal("Please set ´allowUndeploy´ to true in your pm2-meteor settings file!");
      }
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return remoteTasks.killApp(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.deleteAppFolder(session, pm2mConf, cb);
        }
      ], function(err) {
        cli.spinner("", true);
        if (err) {
          return cli.fatal("" + err.message);
        } else {
          return cli.ok("Undeployed your App!");
        }
      });
    },
    scale: function(opts) {
      var pm2mConf, session;
      cli.spinner("Scaling your App");
      pm2mConf = commonTasks.readPM2MeteorConfig();
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return remoteTasks.scaleApp(session, pm2mConf, opts, cb);
        }
      ], function(err) {
        cli.spinner("", true);
        if (err) {
          return cli.fatal("" + err.message);
        } else {
          return cli.ok("Scaled your App");
        }
      });
    },
    logs: function() {
      var pm2mConf, session;
      pm2mConf = commonTasks.readPM2MeteorConfig();
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return remoteTasks.getAppLogs(session, pm2mConf, cb);
        }
      ], function(err) {
        if (err) {
          return cli.fatal("" + err.message);
        }
      });
    },
    revert: function() {
      var pm2mConf, session;
      pm2mConf = commonTasks.readPM2MeteorConfig();
      session = remoteTasks.getRemoteSession(pm2mConf);
      return async.series([
        function(cb) {
          return remoteTasks.revertToBackup(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.extractTarBall(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.installBundleDeps(session, pm2mConf, cb);
        }, function(cb) {
          return remoteTasks.reloadApp(session, pm2mConf, true, cb);
        }
      ], function(err) {
        cli.spinner("", true);
        if (err) {
          return cli.fatal("" + err.message);
        } else {
          return cli.ok("Reverted and hard-restarted your app.");
        }
      });
    }
  };

}).call(this);
